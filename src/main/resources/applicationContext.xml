<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-4.0.xsd 
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/cache
            http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
            
		<!-- 加载小配置文件 -->
        <context:property-placeholder location="classpath:druid.properties"/>
        <!-- 开启注解 -->
        <context:component-scan base-package="com.baizhi.cmfz.service"></context:component-scan>

		<!--加载shiro.xml-->
		<import resource="shiro.xml"/>
        
        <!-- 创建数据源 -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        	<property name="driverClassName" value="${jdbc.driverClassName}"></property>
        	<property name="url" value="${jdbc.url}"></property>
        	<property name="username" value="${jdbc.username}"></property>
        	<property name="password" value="${jdbc.password}"></property>
        	<property name="maxActive" value="${jdbc.maxActive}"></property>
        	<property name="initialSize" value="${jdbc.initialSize}"></property>
        	<property name="maxWait" value="${jdbc.maxWait}"></property>
        </bean>
        
        <!-- MyBatis-config.xml相关 -->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        	<property name="dataSource" ref="dataSource"></property>
        	<property name="mapperLocations">
        		<list>
        			<value>classpath:com/baizhi/cmfz/dao/*DAOMapper.xml</value>
        		</list>
        	</property>
        	<property name="typeAliasesPackage" value="com.baizhi.entity"></property>
        </bean>
        

		<bean class="com.baizhi.cmfz.utils.PoiUtils"></bean>

        <!-- 创建dao实现类对象 -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        	<property name="basePackage" value="com.baizhi.cmfz.dao"></property>
        </bean>
        
        <!-- 创建事务管理器 -->
        <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        	<property name="dataSource" ref="dataSource"></property>
        </bean>
        
        <tx:advice id="txAdvice" transaction-manager="txManager">
        	<tx:attributes>
        		<tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
        		<tx:method name="set*" read-only="true" propagation="SUPPORTS"/>
        		<tx:method name="*" propagation="REQUIRED"/>
        	</tx:attributes>
        </tx:advice>

		<bean id="logAdvice" class="com.baizhi.cmfz.log.UserLog"></bean>
        
        <aop:config>
        	<aop:pointcut expression="execution(* com.baizhi.cmfz.service.*.*(..))" id="servicePointcut"/>
        	<aop:pointcut expression="execution(* com.baizhi.cmfz.service.*.*(..)) &amp;&amp; !execution(* com.baizhi.cmfz.service.impl.CMFZLogServiceImpl.addCMFZLog(..))" id="logPointcut"/>
        	<aop:advisor advice-ref="logAdvice" pointcut-ref="logPointcut"/>
        	<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut"/>
        </aop:config>



		<!-- Redis相关配置 -->
		<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
			<!-- 最大空闲数 连接数-->
			<property name="maxIdle" value="1" />
			<!-- 最大连接数, 默认8个 -->
			<property name="maxTotal" value="8"/>
			<!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true  -->
			<property name="blockWhenExhausted" value="true" />
			<!-- 最大等待时长 -->
			<property name="maxWaitMillis" value="30000" />
			<!-- 对拿到的connection进行validateObject校验；是否是有效连接 -->
			<property name="testOnBorrow" value="true" />
		</bean>
		<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
			<!-- redis  ip地址 -->
			<property name="hostName" value="192.168.20.136" />
			<!-- redis 端口号 -->
			<property name="port" value="6379"/>
			<!-- redis 的连接配置  -->
			<property name="poolConfig" ref="jedisPoolConfig"/>
		</bean>
		<!-- redis 操作对象 -->
		<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
			<!-- 获取redis的连接  -->
			<property name="connectionFactory"   ref="jedisConnectionFactory" />
			<!-- 对key做序列化处理-->
			<property name="keySerializer">
				<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
			</property>
			<!-- 对value做序列化处理-->
			<property name="valueSerializer">
				<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
			</property>
		</bean>
</beans>